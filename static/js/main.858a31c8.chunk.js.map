{"version":3,"sources":["store/slices/userSlice.ts","hooks/useAuth.ts","utils/constansts.ts","components/nav/Navbar.tsx","pages/home/Home.tsx","pages/notFound/NotFound.tsx","hooks/typedReduxHooks.ts","store/slices/firebaseSlice.ts","pages/login/Login.tsx","pages/chat/Chat.tsx","components/app/App.tsx","store/index.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","user","credential","reducers","setUser","state","action","payload","GoogleAuthProvider","credentialFromResult","removeUser","actions","selectors","useAuth","useSelector","isAuth","LOGIN_ROUTE","CHAT_ROUTE","HOME_ROUTE","pages","settings","Navbar","isLoggedIn","React","useState","anchorElNav","setAnchorElNav","anchorElUser","setAnchorElUser","handleCloseNavMenu","handleCloseUserMenu","AppBar","position","Container","maxWidth","Toolbar","disableGutters","sx","display","xs","md","mr","Typography","variant","noWrap","fontFamily","flexGrow","fontWeight","letterSpacing","color","textDecoration","Box","IconButton","size","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","textAlign","Button","my","Tooltip","title","p","Avatar","alt","src","mt","setting","to","Home","memo","NotFound","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initialSate","database","getDatabase","firebaseSlice","firebaseApp","Login","auth","getAuth","dispatch","useDispatch","navigate","useNavigate","singInWithGoogle","useCallback","a","provider","signInWithPopup","result","Error","Grid","alignItems","justifyContent","style","height","window","innerHeight","width","background","container","direction","Chat","db","messagesRef","ref","messages","setMessages","inputMessage","setInputMessage","useEffect","onChildAdded","data","prev","val","border","overflowY","message","margin","uid","uID","marginLeft","padding","profile_picture","username","nanoid","TextField","marginTop","fullWidth","maxRows","multiline","label","value","onChange","target","newMessagesRef","push","set","displayName","email","photoURL","App","path","element","replace","store","configureStore","reducer","userReducer","firebaseAppReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredPaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.858a31c8.chunk.js","sourcesContent":["// there I imported rootState from store because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\n\n// i use action before initialization in thunk so i need it to off warning of linter\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  GoogleAuthProvider,\n  OAuthCredential,\n  User,\n  UserCredential,\n} from 'firebase/auth';\nimport { RootState } from '../../types/storeTypes';\n\ninterface authorizationState {\n  user: User | null;\n  credential: OAuthCredential | null;\n}\n\nconst initialSate: authorizationState = {\n  user: null,\n  credential: null,\n};\n\nexport const userSlice = createSlice({\n  name: 'userAuth',\n  initialState: initialSate,\n  reducers: {\n    setUser: (state, action: PayloadAction<UserCredential>) => {\n      state.user = action.payload.user;\n\n      state.credential = GoogleAuthProvider.credentialFromResult(action.payload);\n    },\n    removeUser: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const {\n  setUser,\n  removeUser,\n} = userSlice.actions;\n\nexport const selectors = {\n  getUserInfo: (state: RootState) => state.user.user,\n  getUserСredential: (state: RootState) => state.user.credential,\n};\n\nexport default userSlice.reducer;\n","import { OAuthCredential, User } from 'firebase/auth';\nimport { useSelector } from 'react-redux';\nimport { selectors } from '../store/slices/userSlice';\n\ninterface AuthUserInfo {\n  isAuth: boolean;\n  user: User | null;\n  credential: OAuthCredential | null;\n}\n\nexport const useAuth = (): AuthUserInfo => {\n  const user = useSelector(selectors.getUserInfo);\n  const credential = useSelector(selectors.getUserСredential);\n\n  return {\n    isAuth: !!user,\n    user,\n    credential,\n  };\n};\n","export const LOGIN_ROUTE = '/login';\nexport const CHAT_ROUTE = '/chat';\nexport const HOME_ROUTE = '/home';\nexport const ROOT_PATH = '/';\nexport const WRONG_PATH = '*';\n","import React, { FC } from 'react';\n// import { useSelector } from 'react-redux';\nimport {\n  AppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n  Container,\n  Box,\n  Menu,\n  MenuItem,\n  Button,\n  Tooltip,\n  Avatar,\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport { NavLink } from 'react-router-dom';\nimport { LOGIN_ROUTE } from '../../utils/constansts';\nimport { useAuth } from '../../hooks/useAuth';\n\nconst pages = ['Products', 'Pricing', 'Blog'];\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\n\nexport const Navbar: FC<{}> = () => {\n  const { isAuth: isLoggedIn } = useAuth();\n\n  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);\n  const [anchorElUser, setAnchorElUser] = React.useState<null | HTMLElement>(null);\n\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n\n  return (\n    <header>\n      <AppBar position=\"static\">\n        <Container maxWidth=\"xl\">\n          <Toolbar disableGutters>\n            <ChatIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\n            <Typography\n              variant=\"h6\"\n              noWrap\n              sx={{\n                mr: 2,\n                display: { xs: 'none', md: 'flex' },\n                fontFamily: 'monospace',\n                flexGrow: 1,\n                fontWeight: 700,\n                letterSpacing: '.3rem',\n                color: 'inherit',\n                textDecoration: 'none',\n              }}\n            >\n              Chat roulette\n            </Typography>\n\n            <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleOpenNavMenu}\n                color=\"inherit\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorElNav}\n                anchorOrigin={{\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'left',\n                }}\n                open={Boolean(anchorElNav)}\n                onClose={handleCloseNavMenu}\n                sx={{\n                  display: { xs: 'block', md: 'none' },\n                }}\n              >\n                {pages.map((page) => (\n                  <MenuItem key={page} onClick={handleCloseNavMenu}>\n                    <Typography textAlign=\"center\">{page}</Typography>\n                  </MenuItem>\n                ))}\n              </Menu>\n            </Box>\n            <ChatIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />\n            <Typography\n              variant=\"h5\"\n              noWrap\n              sx={{\n                mr: 2,\n                display: { xs: 'flex', md: 'none' },\n                flexGrow: 1,\n                fontFamily: 'monospace',\n                fontWeight: 700,\n                letterSpacing: '.3rem',\n                color: 'inherit',\n                textDecoration: 'none',\n              }}\n            >\n              Chat roulette\n            </Typography>\n            <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n              {pages.map((page) => (\n                <Button\n                  key={page}\n                  onClick={handleCloseNavMenu}\n                  sx={{ my: 2, color: 'white', display: 'block' }}\n                >\n                  {page}\n                </Button>\n              ))}\n            </Box>\n\n            <Box sx={{ flexGrow: 0 }}>\n              {\n                isLoggedIn\n                  ? (\n                    <>\n                      <Tooltip title=\"Open settings\">\n                        <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                          <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n                        </IconButton>\n                      </Tooltip>\n                      <Menu\n                        sx={{ mt: '45px' }}\n                        id=\"menu-appbar\"\n                        anchorEl={anchorElUser}\n                        anchorOrigin={{\n                          vertical: 'top',\n                          horizontal: 'right',\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                          vertical: 'top',\n                          horizontal: 'right',\n                        }}\n                        open={Boolean(anchorElUser)}\n                        onClose={handleCloseUserMenu}\n                      >\n                        {settings.map((setting) => (\n                          <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                            <Typography textAlign=\"center\">{setting}</Typography>\n                          </MenuItem>\n                        ))}\n                      </Menu>\n                    </>\n                  )\n                  : (\n                    <Button>\n                      <NavLink to={LOGIN_ROUTE}>\n                        Login\n                      </NavLink>\n                    </Button>\n                  )\n              }\n            </Box>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </header>\n  );\n};\n","import React, { FC, memo } from 'react';\n\nexport const Home: FC<{}> = memo(() => {\n  return (\n    <div>\n      <h1>HOME PAGE</h1>\n    </div>\n  );\n});\n","import React, { FC } from 'react';\n\nexport const NotFound: FC<{}> = React.memo(() => {\n  return (\n    <div>\n      <h1>NOT FOUND PAGE</h1>\n    </div>\n  );\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../types/storeTypes';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// there I imported rootState from store because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\n\n// i use action before initialization in thunk so i need it to off warning of linter\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { FirebaseApp, initializeApp } from 'firebase/app';\nimport { Database, getDatabase } from 'firebase/database';\nimport { RootState } from '../../types/storeTypes';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app, process.env.REACT_APP_FIREBASE_DATABASE_URL);\n\ninterface authorizationState {\n  app: FirebaseApp | undefined;\n  database: Database;\n}\n\nconst initialSate: authorizationState = {\n  app,\n  database,\n};\n\nexport const firebaseSlice = createSlice({\n  name: 'firebase',\n  initialState: initialSate,\n  reducers: {\n  },\n});\n\n// export const {\n// } = firebaseSlice.actions;\n\nexport const selectors = {\n  getFirebaseApp: (state: RootState) => state.firebaseApp.app,\n  getDatabase: (state: RootState) => state.firebaseApp.database,\n};\n\nexport default firebaseSlice.reducer;\n","import {\n  Box,\n  Button,\n  Container,\n  Grid,\n} from '@mui/material';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { CHAT_ROUTE } from '../../utils/constansts';\nimport { useAppDispatch } from '../../hooks/typedReduxHooks';\nimport { selectors } from '../../store/slices/firebaseSlice';\nimport { setUser } from '../../store/slices/userSlice';\n\nexport const Login: FC<{}> = memo(() => {\n  const app = useSelector(selectors.getFirebaseApp);\n  const auth = getAuth(app);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const singInWithGoogle = useCallback(async () => {\n    try {\n      const provider = new GoogleAuthProvider();\n\n      const result = await signInWithPopup(auth, provider);\n\n      dispatch(setUser(result));\n      navigate(CHAT_ROUTE);\n    } catch (e) {\n      throw new Error('some issue with sing in with google token');\n    }\n  }, [auth, navigate]);\n\n  return (\n    <Container>\n      <Grid\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        display=\"flex\"\n        style={{ height: window.innerHeight - 64 }}\n      >\n        <Grid\n          style={{ width: 400, background: 'lightgray' }}\n          container\n          alignItems=\"center\"\n          direction=\"column\"\n        >\n          <Box p={5}>\n            <Button variant=\"outlined\" onClick={singInWithGoogle}>Sing in with google</Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Avatar,\n  Button,\n  Container,\n  Grid,\n  TextField,\n} from '@mui/material';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  ref,\n  set,\n  onValue,\n  push,\n  onChildAdded,\n} from 'firebase/database';\nimport { nanoid } from 'nanoid';\nimport { useAuth } from '../../hooks/useAuth';\nimport { selectors } from '../../store/slices/firebaseSlice';\nimport { Message } from '../../types/message';\n\nexport const Chat: FC<{}> = memo(() => {\n  const { user } = useAuth();\n  const db = useSelector(selectors.getDatabase);\n  const messagesRef = ref(db, 'posts');\n  const [messages, setMessages] = useState<Array<Message>>([]);\n\n  const [inputMessage, setInputMessage] = useState('');\n\n  const writeMessageToDB = () => {\n    const newMessagesRef = push(messagesRef);\n\n    set(newMessagesRef, {\n      uID: user?.uid,\n      username: user?.displayName,\n      email: user?.email,\n      profile_picture: user?.photoURL,\n      message: inputMessage,\n    });\n\n    setInputMessage('');\n  };\n\n  useEffect(() => {\n    onChildAdded(messagesRef, (data) => {\n      setMessages((prev: Array<Message>) => [...prev, data.val() as Message]);\n      // eslint-disable-next-line no-console\n      // console.log(data.val());\n    });\n  }, []);\n\n  const onMessagesUpdate = useCallback(() => {\n\n  }, []);\n\n  return (\n    <Container>\n      <Grid\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        direction=\"column\"\n        display=\"flex\"\n        style={{ height: window.innerHeight - 64 }}\n      >\n        <div\n          style={{\n            width: '80%',\n            height: '70vh',\n            border: '1px solid gray',\n            overflowY: 'auto',\n          }}\n        >\n          {messages.map(message => (\n            <div\n              key={nanoid()}\n              style={{\n                margin: 10,\n                border: user?.uid === message.uID ? '2px solid green' : '2px solid red',\n                marginLeft: user?.uid === message.uID ? 'auto' : '10px',\n                width: 'fit-content',\n                padding: 5,\n              }}\n            >\n              <Grid container>\n                <Avatar src={message.profile_picture} />\n                <div>{message.username}</div>\n              </Grid>\n              <div>\n                {message.message}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Grid\n          container\n          alignItems=\"flex-end\"\n          direction=\"column\"\n          style={{ width: '80%' }}\n        >\n          <TextField\n            style={{ marginTop: 10 }}\n            fullWidth\n            maxRows={1}\n            multiline\n            size=\"small\"\n            id=\"outlined-basic\"\n            label=\"Enter message\"\n            variant=\"outlined\"\n            value={inputMessage}\n            onChange={({ target }) => setInputMessage(target.value)}\n          />\n          <Button\n            size=\"small\"\n            onClick={writeMessageToDB}\n          >\n            Send\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Navbar } from '../nav';\nimport {\n  ROOT_PATH,\n  WRONG_PATH,\n  HOME_ROUTE,\n  LOGIN_ROUTE,\n  CHAT_ROUTE,\n} from '../../utils/constansts';\n\nimport { Home } from '../../pages/home';\nimport { NotFound } from '../../pages/notFound';\nimport { Login } from '../../pages/login';\nimport { Chat } from '../../pages/chat';\n\n// import { AppRouter } from '../appRouter';\nimport './App.scss';\n\nexport const App: FC<{}> = memo(() => {\n  const { isAuth: isLoggedIn } = useAuth();\n\n  return (\n    <>\n      <Navbar />\n      {/* <AppRouter /> */}\n      {isLoggedIn\n        ? (\n          <Routes>\n            <Route path={ROOT_PATH} element={<Navigate to={HOME_ROUTE} replace />} />\n\n            <Route path={HOME_ROUTE} element={<Home />} />\n            <Route path={CHAT_ROUTE} element={<Chat />} />\n\n            <Route path={WRONG_PATH} element={<NotFound />} />\n          </Routes>\n        )\n        : (\n          <Routes>\n            <Route path={ROOT_PATH} element={<Navigate to={HOME_ROUTE} replace />} />\n\n            <Route path={HOME_ROUTE} element={<Home />} />\n            <Route path={LOGIN_ROUTE} element={<Login />} />\n\n            <Route path={WRONG_PATH} element={<NotFound />} />\n          </Routes>\n        )}\n    </>\n  );\n});\n","/* eslint-disable import/no-cycle */\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './slices/userSlice';\nimport firebaseAppReducer from './slices/firebaseSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    firebaseApp: firebaseAppReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      // Ignore these action types\n      ignoredActions: ['userAuth/setUser'],\n      // Ignore these field paths in all actions\n      // ignoredActionPaths: ['meta.arg', 'payload.timestamp'],\n      // Ignore these paths in the state\n      ignoredPaths: [\n        'user.user',\n        'user.credential',\n        'firebaseApp.app',\n        'firebaseApp.database',\n      ],\n    },\n  }),\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/app';\nimport { store } from './store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}